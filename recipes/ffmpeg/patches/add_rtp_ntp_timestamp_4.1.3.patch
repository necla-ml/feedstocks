diff --git a/libavcodec/avcodec.h b/libavcodec/avcodec.h
index bee2234575..f4a5335e8b 100644
--- a/libavcodec/avcodec.h
+++ b/libavcodec/avcodec.h
@@ -28,6 +28,7 @@
  */
 
 #include <errno.h>
+#include <stdbool.h>
 #include "libavutil/samplefmt.h"
 #include "libavutil/attributes.h"
 #include "libavutil/avutil.h"
@@ -1464,6 +1465,17 @@ typedef struct AVPacket {
 
     int64_t pos;                            ///< byte position in stream, -1 if unknown
 
+    uint32_t timestamp;
+
+    uint64_t last_rtcp_ntp_time;
+
+    uint32_t last_rtcp_timestamp;
+
+    uint16_t seq;
+
+    bool synced;
+
+
 #if FF_API_CONVERGENCE_DURATION
     /**
      * @deprecated Same as the duration field, but as int64_t. This was required
diff --git a/libavformat/rtpdec.c b/libavformat/rtpdec.c
index e75a34cb93..b6851a87d8 100644
--- a/libavformat/rtpdec.c
+++ b/libavformat/rtpdec.c
@@ -19,6 +19,8 @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
  */
 
+#include <stdbool.h>
+
 #include "libavutil/mathematics.h"
 #include "libavutil/avstring.h"
 #include "libavutil/intreadwrite.h"
@@ -591,6 +593,8 @@ void ff_rtp_parse_set_crypto(RTPDemuxContext *s, const char *suite,
  */
 static void finalize_packet(RTPDemuxContext *s, AVPacket *pkt, uint32_t timestamp)
 {
+    bool synced = false;
+
     if (pkt->pts != AV_NOPTS_VALUE || pkt->dts != AV_NOPTS_VALUE)
         return; /* Timestamp already set by depacketizer */
     if (timestamp == RTP_NOTS_VALUE)
@@ -622,6 +626,21 @@ static void finalize_packet(RTPDemuxContext *s, AVPacket *pkt, uint32_t timestam
     s->timestamp = timestamp;
     pkt->pts     = s->unwrapped_timestamp + s->range_start_offset -
                    s->base_timestamp;
+
+    /* export private data (timestamps) into AVPacket */
+    if (s->last_rtcp_ntp_time != AV_NOPTS_VALUE && s->last_rtcp_timestamp) {
+        synced = true;
+	pkt->last_rtcp_ntp_time = s->last_rtcp_ntp_time;
+        pkt->last_rtcp_timestamp = s->last_rtcp_timestamp;
+    }
+    else {
+        pkt->last_rtcp_ntp_time = 0;
+        pkt->last_rtcp_timestamp = 0;
+    }
+
+    pkt->seq = s->seq;
+    pkt->timestamp = s->timestamp;
+    pkt->synced = synced;
 }
 
 static int rtp_parse_packet_internal(RTPDemuxContext *s, AVPacket *pkt,
diff --git a/libavformat/utils.c b/libavformat/utils.c
index 93e588ee1e..8163a29d00 100644
--- a/libavformat/utils.c
+++ b/libavformat/utils.c
@@ -21,6 +21,7 @@
 
 #include <stdarg.h>
 #include <stdint.h>
+#include <stdbool.h>
 
 #include "config.h"
 
@@ -1571,6 +1572,11 @@ static int read_frame_internal(AVFormatContext *s, AVPacket *pkt)
 {
     int ret = 0, i, got_packet = 0;
     AVDictionary *metadata = NULL;
+    uint32_t timestamp;
+    uint64_t last_rtcp_ntp_time;
+    uint32_t last_rtcp_timestamp;
+    uint16_t seq;
+    bool synced;
 
     av_init_packet(pkt);
 
@@ -1578,6 +1584,13 @@ static int read_frame_internal(AVFormatContext *s, AVPacket *pkt)
         AVStream *st;
         AVPacket cur_pkt;
 
+        /* copy over the RTP time stamp */
+	timestamp = cur_pkt.timestamp;
+	last_rtcp_ntp_time = cur_pkt.last_rtcp_ntp_time;
+	last_rtcp_timestamp = cur_pkt.last_rtcp_timestamp;
+	seq = cur_pkt.seq;
+	synced = cur_pkt.synced;
+
         /* read next packet */
         ret = ff_read_packet(s, &cur_pkt);
         if (ret < 0) {
@@ -1762,6 +1775,12 @@ FF_ENABLE_DEPRECATION_WARNINGS
                av_ts2str(pkt->dts),
                pkt->size, pkt->duration, pkt->flags);
 
+    pkt->timestamp = timestamp;
+    pkt->last_rtcp_ntp_time = last_rtcp_ntp_time;
+    pkt->last_rtcp_timestamp = last_rtcp_timestamp;
+    pkt->seq = seq;
+    pkt->synced = synced;
+
     return ret;
 }
 
