package:
  name: {{ environ.get('RECIPE', 'ml-vision') | lower }}
  version: {{ environ.get('GIT_DESCRIBE_TAG', '').replace('v', '') }}

source:
  git_rev: {{ GIT_DESCRIBE_TAG }}
  git_rev: v0.13.0
  git_url: https://github.com/necla-ml/ML-Vision.git

build:
  number: {{ GIT_DESCRIBE_NUMBER }}
  {% if environ.get('GIT_DESCRIBE_NUMBER', '0') == '0' %}string: py{{ environ.get('PY_VER').replace('.', '') }}{{ environ.get('BLD_STR_SUFFIX') }}_0
  {% else %}string: py{{ environ.get('PY_VER').replace('.', '') }}{{ environ.get('BLD_STR_SUFFIX') }}_{{ environ.get('GIT_BUILD_STR', 'GIT_STUB') }}{% endif %}
  script: pip install -vv --no-deps --ignore-installed --no-build-isolation --no-binary ':all:' .
  features:
{{ environ.get('CONDA_CPUONLY_FEATURE', '') }}

requirements:
  build:
#    - gcc_linux-64  # [linux]
#    - gxx_linux-64  # [linux]
#    - compilers  # [linux]
#    - cxx-compiler
# {{ environ.get('CONDA_NVCC_CONSTRAINT', '') }}
  host:
    - ml=1.4.0
{{ environ.get('CONDA_CUDATOOLKIT_CONSTRAINT', '') }}
  run:
    - accimage>=0.1.1           # [not osx]
    - av>=8.0.2
    - ml=1.4
#    - opencv                   # requires `jpeg>=9d` from conda-forge
    - opencv-python             # FIXME: non-official to work around `jpeg<=9b` from torchvision
    - torchvision={{ PTV_VER }} # in case of unexpected downgrade
    - pycocotools>=2.0.2
    - seaborn                   # required by yolov5-v4.0
{{ environ.get('CONDA_CUDATOOLKIT_CONSTRAINT', '') }}
{{ environ.get('MAGMA_PACKAGE', '') }}
test:
  requires:
    - pytest
  imports:
    - ml.av
    - ml.cv                     # TODO: to remove once dependency on opencv is out
    - ml.vision.ops
  source_files:
    - setup.cfg
    - tests
    - assets
  commands:
    - $PYTHON -c 'import torch; import ml._C'
    - pytest -m essential

about:
  home: https://gitlab.com/necla-ml/ML-Vision
  license: BSD
  license_family: BSD
  summary: User facing ML vision library